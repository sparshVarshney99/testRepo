  name: Build, Release & Deploy

  on:
    push:
      branches:
        - main

  permissions:
    contents: write

  jobs:
    build:
      runs-on: ubuntu-latest
      outputs:
        tag_name: ${{ steps.create_tag.outputs.tag }}

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up JDK 21
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '21'

        - name: Grant execute permission for gradlew
          run: chmod +x gradlew

        - name: Build with Gradle
          run: ./gradlew build

        - name: Upload built JAR as artifact
          uses: actions/upload-artifact@v4
          with:
            name: app-jar
            path: build/libs/*.jar

        - name: Create and push Git tag
          id: create_tag
          run: |
            TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
            echo "Generated tag: $TAG_NAME"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

    release:
      needs: build
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Download artifact from build
          uses: actions/download-artifact@v4
          with:
            name: app-jar
            path: build/libs

        - name: Create GitHub Release
          uses: softprops/action-gh-release@v1
          with:
            tag_name: ${{ needs.build.outputs.tag_name }}
            files: build/libs/*.jar
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deploy:
      needs: release
      runs-on: ubuntu-latest

      steps:
        - name: Get latest release asset URL
          id: get_download_url
          uses: actions/github-script@v7
          with:
            script: |
              const release = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const asset = release.data.assets.find(a => a.name.endsWith('-SNAPSHOT.jar') && !a.name.includes('-plain'));
              if (!asset) throw new Error("No .jar found in latest release.");
              return asset.browser_download_url;
            result-encoding: string

        - name: Deploy to EC2
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.STAGING_EC2_HOST }}
            username: ec2-user
            key: ${{ secrets.EC2_SSH_KEY }}
            port: ${{ secrets.EC2_PORT || 22 }}
            script: |
              mkdir -p ~/app
              cd ~/app
              wget -O app.jar "${{ steps.get_download_url.outputs.result }}"
              pkill -f 'java -jar' || true
              fuser -k 8080/tcp || true
              nohup java -jar app.jar > app.log 2>&1 &