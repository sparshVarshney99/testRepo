name: Build, Release & Deploy

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag }}
      jar_name: ${{ steps.set_jar_name.outputs.jar_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Set JAR name with timestamp
        id: set_jar_name
        run: |
          JAR_NAME="app-$(date +'%Y%m%d%H%M%S').jar"
          mv build/libs/*-SNAPSHOT.jar build/libs/$JAR_NAME
          echo "jar_name=$JAR_NAME" >> $GITHUB_OUTPUT

      - name: Upload built JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/${{ steps.set_jar_name.outputs.jar_name }}

      - name: Create and push Git tag
        id: create_tag
        run: |
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifact from build
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}
          files: build/libs/${{ needs.build.outputs.jar_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest

    steps:
      - name: Get latest release asset URL
        id: get_download_url
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const jarName = `${{ needs.build.outputs.jar_name }}`;
            const asset = release.data.assets.find(a => a.name === jarName);
            if (!asset) throw new Error("JAR not found in latest release.");
            return asset.browser_download_url;
          result-encoding: string

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            mkdir -p ~/app
            cd ~/app

            echo "📦 Downloading new JAR..."
            rm -f app.jar
            wget -O app.jar "${{ steps.get_download_url.outputs.result }}"

            echo "🛑 Killing existing app (if running)..."
            if [ -f app.pid ]; then
              kill -9 $(cat app.pid) || true
              rm app.pid
            fi

            echo "🚀 Starting new app in background..."
            nohup java -jar app.jar > app.log 2>&1 &
            echo $! > app.pid

            echo "⏳ Waiting for app to start..."
            sleep 5

            echo "📋 Checking if app is running..."
            ps -p $(cat app.pid) && echo "✅ App is running!" || echo "❌ App failed to start"

            echo "📄 Tailing app.log:"
            tail -n 20 app.log
